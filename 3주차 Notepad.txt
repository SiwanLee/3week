3주차 Notepad

산술연산자 : 사칙연산을 이용하는 가장 기본적이고 또한 가장 많이 사용되는 연산자이다.
                 (연산자와 피연산자의 타입에 따라 연산의 결과가 달라지는 특징이 있음)

대입연산자 : 변수에 어떤 값을 집어 넣는 동작 => 변수의 값을 변경할 때 사용
 - 좌변값 : 대입 연산자의 왼쪽에 올 수 있는 값

복합 대입 연산자 : 대입 연산자와 다른 연산자가 결합된 연산자
                       (ex. a=a+3 => a+=3)

증감 연산자 : 피연산자를 1씩 증가시키거나 감소시킨다.
 - 전위형(Prefix) : 증감연산자가 피연산자 앞에 위치한다.(++a, --a)
 - 후위형(Postifix) : 증감연산자가 피연산자 뒤에 위치한다.(a++, a--)

 * C는 함수의 인수를 뒤에서부터 순서대로 전달한다.

 - 관계연산자 : 좌변과 우변의 데이터 타입이 일치해야 한다는 점을 주의!
                    수식을 평가하여 그 결과가 참이면 1(true)을 리턴 거짓이면 0(false)를 리턴한다.

   if(1)명령;   //항상 참
   if(0)명령;   //항상 거짓

 - 논리 연산자 : 주로 관계 연산자와 함꼐 사용되며, 두 개 이상의 조건식을 결합하여 하나의 진리값을 만들어 낸다.
   ! => 논리부정(Not) : 논리식의 진위를 반대로 만든다.
   && => 논리곱(And) : 두 논리식이 모두 참이어야 참이다.
   || => 논리합(Or) : 두 논리식 중 하나만 참이면 참이다.

 * Short Circuit : 이미 결정난 값에 대해 불필요한 연산을 하지 않으므로써 실행 속도를 높이는 컴파일러의 기능

 - 비트 연산자 : 피연산자가 모두 정수형이거나 정수로 자동 변활될 수 있는 타입이어야 함. 실수나 포인터 등은 비트 연산자와 함께 사용할 수 없다.
   ~ : 비트를 반전시킨다.(단항 연산자)
   & : 대응되는 비트가 모두 1일 때 1이다.(이항 연산자)
   |   : 대응되는 비트가 모두 0일 떄 0이다.(이항 연산자)
   ^  : 두 개의 비트가 달라야 1이다.(이항 연산자)
   <<: 지정한 수만큼 왼쪽으로 비트들을 이동시킨다.(이항 연산자)
   >>: 지정한 수만큼 오른쪽으로 비트들을 이동시킨다.(이항 연산자)

 - 삼항 조건 연산자 : 피연산자를 세 개나 가지는 연산자

 - 쉼표 연산자 : 피연산자로 양쪽에 두 개의 표현식을 취하며, 좌변을 먼저 평가하고 우변을 평가한 후 우변의 연산 결과를 리턴한다.
                     (어떤 연산을 한다기보다, 두 연산식을 하나로 묶는 역할만 한다.)
 => 주로 쓰는 용도 : {}의 도움없이 두 개 이상의 문장을 하나로 묶어야 할 때와 for문에서 제어 변수 두개를 사용하고자 할 떄 쓴다.

  - sizeof 연산자 : 괄호안에 있는 대상이 메모리를 얼마나 차지하고 있는지 계산한다.
                       (실용적인 사용예는 배열의 크기를 계산할 때이다.)      
                       (ex. int price[100][300]) => 총 1200바이트)

 - 캐스트 연산자 : 수식내에서 변수의 타입을 강제로 다른 타입으로 바꾸는 것
                        (ex. (타입)변수 / 타입(변수))

 - 연산순위 : 수식내에 여러 가지 연산자가 있을 경우 어떤 연산을 먼저 처리하는가를 지정하는 것이다.
                 (ex. a=a*2+3  => a*=2+3 / =복합대입연산자는 오른쪽이 우선으로 결합되는 것을 주의!)

 - 결합 순서 : 수식내에 같은 종류의 연산자가 있을 떄 어떤 방향의 연산을 먼저 수행할 것인가를 지정한다.
                  (연산 순위는 다른 종류의 연산자에 대한 실행 순서 / 결합 순서는 같은 연산자의 실행 순서를 지정한다.)
                  (대입 연산자가 오른쪽 우선의 결합 순서를 가지므로 복합 대입 연산자들도 모두 오른쪽 우선으로 되어 있음)
                  (단항 연산자들은 모두 오른쪽 우선 순위를 가진다.)
                  (ex. (double)(unsigned)i;) => (unsigned)가 먼저 실행되어 i의 부호를 없앤 후 (double)이 실행되어 실수 타입으로 바꾼다.

 - 산술 변환 : 데이터 타입이 조금 다른 변수끼리라도 자동으로 변환이 가능하다면 연산을 허용함
                  (다른 타입의 데이터가 한 수식에 동시에 사용될 떄 연산을 위해 데이터형을 임시로 변환하는 동작)
                  (상승 변환 / 하강 변환 / 부호 변환)

 1) 상승 변환 : 연산중에 정확성을 잃지 않기 위해 가급적이면 큰 타입으로 변환하는 것
 2) 하강 변환 : 실수형은 정수형 변수에 담을 수 없으므로 소수점 이하를 버리는 작은 타입으로 변환이 이루어짐

 C의 산술 변환 규칙
 1) 이항 연산시 양변의 타입이 다르면 큰 쪽으로 상승 변환된다.
 2) 대입 연산시 좌변의 타입을 따른다.(대입되는 값이 변수보다 더 크면 잘라낸다.)
 3) 함수 호출시 실인수와 형식인수의 타입이 다르면 형식인수의 타입을 따라간다.
 4) 캐스트 연산자를 사용하면 강제로 타입을 변환할 수 있다.(사용자가 직접 지정한 명시적 변환)
 5) 수식내에서 사용될 경우 char, unsigned char, enum형은 int형으로 자동 확장되며, float형은 double형으로 확장된다.